services:
    postgres:
        image: postgis/postgis:16-3.5
        platform: linux/amd64
        volumes:
            - .:/postgres
            - ./postgis-init.sql:/docker-entrypoint-initdb.d/postgis-init.sql
        ports:
            - "5432:5432"
        env_file: ".env.${NODE_ENV}"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        image: rabbitmq:4.1.0-management
        platform: linux/amd64
        volumes:
            - .:/rmq
        ports:
            - "5672:5672"
            - "15672:15672"
        env_file: ".env.${NODE_ENV}"
        healthcheck:
            test: ["CMD-SHELL", "rabbitmqctl status || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 10

    prometheus:
        image: prom/prometheus
        platform: linux/amd64
        container_name: prometheus
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
            - "9090:9090"

    grafana:
        image: grafana/grafana
        platform: linux/amd64
        container_name: grafana
        ports:
            - "3001:3000"
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana_data:/var/lib/grafana

    redis:
        image: redis:alpine
        platform: linux/amd64
        ports:
            - "6379:6379"
    tekro_nest:
        build:
            context: .
            dockerfile: Dockerfile.${NODE_ENV}
        volumes:
            - .:/app
        environment:
            FLASK_DEBUG: "true"
            NODE_ENV: ${NODE_ENV}
        ports:
            - "3000:3000"
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy

volumes:
    grafana_data:
